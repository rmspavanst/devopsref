---
- hosts: local
  gather_facts: no
  vars:
    IP: "ifconfig | grep 'inet 10.170' | awk '{print $2}'"
  tasks:
    - name: get the ip adress
      shell: "{{ IP }}"
      register: ip
      become: yes
      become_user: root
    - debug:
        var: ip.stdout


#when: ansible_facts['ansible_all_ipv4_addresses'] == '10.x.x.x        
...

---
- hosts: local
  gather_facts: no
  become: yes
  become_user: root
  vars:
    IP: "ifconfig | grep 'inet 10.170' | awk '{print $2}'"
    HADR_Parameters: db2pd -db LPPSA –hadr
    db2: db2 takeover hadr on db LPPSA

  tasks:
    - name: get and check the ip adress
      shell: "{{ IP }}"
      register: ip
      become: yes
      become_user: root
    - debug:
        var: ip
    
    - name: Check the HADR Parameters
      shell: "{{ HADR_Parameters }} | grep HADR"
      register: HADR

    - debug: var=HADR.stdout_lines

    - fail:
        msg: " {{ ip }} doesn't exist."
      when: not ip.stdout_lines

    - debug:
        msg: "Warning:You are going to swingover LMS Core DB to DR Site. IP shall be 172.29.48.204 and this server IP is {{ ip.stdout }}."
      when: ip.stdout_lines

    - debug:
        msg: "LMS CoreDB Failover from Prod to DR is starting…"

    - name: Start LMS CoreDB Failover from Prod to DR
      shell: "{{ db2 }}"
       
    - debug:
        msg: "LMS CoreDB Failover from Prod to DR is completed"
    
    - name: Check the HADR Parameters
      shell: "{{ HADR_Parameters }} | grep HADR"
      register: HADR

    - debug: var=HADR.stdout_lines
...

---
- hosts: all
  vars:
    ip_newname:
      10.0.0.1: newname1
      10.0.0.2: newname2
      10.0.0.3: newname3
  tasks:
    - name: Change the hostname
      win_hostname:
        name: "{{ ip_newname[ansible_default_ipv4.address] }}"
      register: res
      when: ansible_default_ipv4.address in ip_newname.keys()
      
    - name: reboot
        win_reboot: required
      when: res is defined and res.reboot_required

    - name: Gather a virtual machine info
      vmware_guest_info:
      hostname: '{{ vsphere_host }}'
      username: '{{ vsphere_user }}'
      password: '{{ vsphere_password }}'
      validate_certs: false
      datacenter: "{{ vsphere_datacenter }}"
    - name: "{{ hostname }}"
      schema: vsphere
      properties:
        - guest.ipAddress
      retries: 60
      delay: 10
      until: gather_vm_info.instance.guest.ipAddress is not none
      register: gather_vm_info
      delegate_to: localhost
      when: ansible_hostname == "1-Europe-ECV-Site2"
  ...

---
- name: Gather a virtual machine info
  vmware_guest_info:
    hostname: '{{ vsphere_host }}'
    username: '{{ vsphere_user }}'
    password: '{{ vsphere_password }}'
    validate_certs: false
    datacenter: "{{ vsphere_datacenter }}"
    name: "{{ hostname }}"
    schema: vsphere
    properties:
      - guest.ipAddress
  retries: 60
  delay: 10
  until: gather_vm_info.instance.guest.ipAddress is not none
  register: gather_vm_info
  delegate_to: localhost
  when: "'192.168' not in ansible_host"


- name: Gather a virtual machine info
  vmware_guest_info:
    hostname: '{{ vsphere_host }}'
    username: '{{ vsphere_user }}'
    password: '{{ vsphere_password }}'
    validate_certs: false
    datacenter: "{{ vsphere_datacenter }}"
    name: "{{ hostname }}"
    schema: vsphere
    properties:
      - guest.ipAddress
  retries: 60
  delay: 10
  until: gather_vm_info.instance.guest.ipAddress != "0.0.0.0"
  register: gather_vm_info
  delegate_to: localhost
  when: "'192.168' not in ansible_host" 


- debug: var=gather_vm_info.instance.guest.ipAddress


- name: Update IP
  block:
    - name: Add ansible_host IP to the YAML inventory file
      delegate_to: localhost
      lineinfile:
        path: host_vars/{{ hostname }}.yml
        line: "  ansible_host: {{ gather_vm_info.instance.guest.ipAddress }}"

    - name: Update dynamic ansible_host with new IP Address
      set_fact: 
        ansible_host: "{{ gather_vm_info.instance.guest.ipAddress }}"
        ansible_hostname: "{{ hostname }}"

  when: "'192.168' not in ansible_host"
...

---
- hosts: all
  gather_facts: yes
  tasks:
#    - debug: var=hostvars[inventory_hostname]['ansible_env'].SSH_CONNECTION.split(' ')[2]
    - debug: var=hostvars[inventory_hostname]['ansible_default_ipv4']['address']
#    - debug: var=hostvars[inventory_hostname]['ansible_default_ipv6']['address']
    # Getting the IP address of enp0s3 interface
    - debug: var=ansible_enp0s3.ipv4.address
    # Getting the IP address of eth0 interface
    - debug: var=ansible_eth0.ipv4.address