---
- block:    
    - set_fact:
        srch_string: "{{search_string | replace('(.*)',' ') }}"

    - set_fact:
        srch_string: "{{search_string | replace('( *)',' ') }}"
  
    - debug:
        msg: "{{ winBatFileRun }} - \'{{srch_string}}\' is present in Batch script output."
      when: (batchRun_status | regex_search(search_string)) | default('global', boolean=True) in batchRun_status

    - fail:
        msg: "{{ winBatFileRun }} - Not able to proceed as \'{{srch_string}}\' is not present in Batch Script output!"
      when: not (batchRun_status | regex_search(search_string)) | default('global', boolean=True) in batchRun_status

    - block:
        - name: "{{ winBatFileRun }} - Check DB {{DBName}} Heartbeat timestamp"
          set_fact:
            DBString: "{{ batchRun_status | regex_search(search_string)}}"
        - debug:
            var: DBString

        - set_fact:
            priDBTimeStamp: "{{ DBString | regex_search('Primary\\s+: ' + servDate + ' ' + '\\d\\d:\\d\\d') }}"
            secDBTimeStamp: "{{ DBString | regex_search('Secondary\\s+: ' + servDate + ' ' + '\\d\\d:\\d\\d') }}"

        - set_fact:
            priDBTimeStamp: "{{ DBString | regex_search('Primary\\s+: ' + servDateRev + ' ' + '\\d\\d:\\d\\d') }}"
            secDBTimeStamp: "{{ DBString | regex_search('Secondary\\s+: ' + servDateRev + ' ' + '\\d\\d:\\d\\d') }}"
          when: priDBTimeStamp == "" and secDBTimeStamp == ""

        - fail:
            msg: "{{ winBatFileRun }} - DB {{DBName}} Heartbeat is old. Please check!"
          when: priDBTimeStamp == "" and secDBTimeStamp == ""

        - set_fact:
            priDBTimeStamp: "{{ priDBTimeStamp | regex_replace('^\\w+\\s+:\\s+(.*)$', '\\1') | trim }}"
            secDBTimeStamp: "{{ secDBTimeStamp | regex_replace('^\\w+\\s+:\\s+(.*)$', '\\1') | trim }}"

        - block:
            - name: "{{ winBatFileRun }} - Substract minute(s) from primary timestamp to match secondary timestamp"
              command: |
                date +'%Y-%m-%d %H:%M' -d "{{priDBTimeStamp}} {{item}} minutes ago"
              no_log: True
              with_items: { 0,1,2,3,4,5 }
              changed_when: date1.stdout == secDBTimeStamp
              register: date1

            - name: "{{ winBatFileRun }} - Add minute(s) to primary timestamp to match secondary timestamp"
              command: |
                date +'%Y-%m-%d %H:%M' -d "{{priDBTimeStamp}} {{item}} minutes"
              no_log: True
              with_items: { 0,1,2,3,4,5 }
              changed_when: date2.stdout == secDBTimeStamp
              register: date2

            - set_fact:
                matchedDateTimeHourMin: false

            - set_fact:
                matchedDateTimeHourMin: true
              loop: "{{ date1.results }}"
              when: item.changed

            - set_fact:
                matchedDateTimeHourMin: true
              loop: "{{ date2.results }}"
              when: item.changed
          delegate_to: localhost

        - debug:
            msg: " priDBTimeStamp: {{priDBTimeStamp}}; secDBTimeStamp: {{secDBTimeStamp}} "

        - debug:
            msg: "{{ winBatFileRun }} - DB {{DBName}} Heartbeat matched."
          when: matchedDateTimeHourMin
 
        - fail:
            msg: "{{ winBatFileRun }} - DB {{DBName}} Heartbeat not matched! primary and secondary time difference > 5 minutes"
          when: not matchedDateTimeHourMin

      when: compareDBHeartbeat

  tags:
    - P10
    - P12
    - P8
    - P14
    - P15
    - P16
    - A2
    - A5.1a
    - A5.1b
    - A5.1c
    - A5.2a
    - A5.2b
    - A5.2c
    - A5c
    - B2
    - B4
    - B6
    - B8
    - B9
    - B10
    - B11
    - B13
    - B13.1b  
    - B13c

