---
- block:

    - name: "{{actNo}} - Drop temp tables"
      community.postgresql.postgresql_table:
        name: "{{ item }}"
        state: absent
        db: "{{pgDB}}"
        login_host: "{{host}}"
        login_user: "{{DBuser}}"
        login_password: "{{DBpassword}}"
      with_items: "{{ tbl2bCreated }}"
      register: tblDrop

    - debug:
        var: tblDrop

    - name: "{{actNo}} - Create Temp table for Prod Data"
      community.postgresql.postgresql_table:
        name: "{{ item }}"
        columns:
        - "{{tblColumn1}}"
        - "{{tblColumn2}}"
        owner: "{{DBuser}}"
        db: "{{pgDB}}"
        login_host: "{{host}}"
        login_user: "{{DBuser}}"
        login_password: "{{DBpassword}}"
      with_items: "{{ tbl2bCreated }}"
      register: tblCreate

    - debug:
        var: tblCreate

    - name: "{{actNo}} - Load data from file into table from Prod data"
      community.postgresql.postgresql_copy:
        copy_from: "{{ansPath}}/{{tempFileProd}}"
        dst: "{{prodTbl}}"
        options:
          delimiter: ','
          null: 'N'
        db: "{{pgDB}}"
        login_host: "{{host}}"
        login_user: "{{DBuser}}"
        login_password: "{{DBpassword}}"
      register: loadProdStat

    - debug:
        var: loadProdStat

    - name: "{{actNo}} - Load data from file into table from DR data"
      community.postgresql.postgresql_copy:
        copy_from: "{{ansPath}}/{{tempFileDR}}"
        dst: "{{drTbl}}"
        options:
          delimiter: ','
          null: 'N'
        db: "{{pgDB}}"
        login_host: "{{host}}"
        login_user: "{{DBuser}}"
        login_password: "{{DBpassword}}"
      register: loadDRStat

    - debug:
        var: loadDRStat

    - name: "{{actNo}} - Retrieve extra {{objType}} entr(ies) from Prod server(if exist)"
      community.postgresql.postgresql_query:
        db: "{{pgDB}}"
        query: select * from {{prodTbl}} except select * from {{drTbl}};
        login_host: "{{host}}"
        login_user: "{{DBuser}}"
        login_password: "{{DBpassword}}"
      register: extraFromProd

    - name: "{{actNo}} - process STDOUT into temp file for proper display in Tower"
      copy:
        content: "{{ extraFromProd.query_result| to_nice_yaml }}"
        dest: "{{ansPath}}/temp/tempF"
      become: yes
      become_user: root
      delegate_to: 127.0.0.1

    - shell: |
        cat {{ansPath}}/temp/tempF
      register: result

    - debug:
        msg: "{{actNo}} - Extra {{objType}} entr(ies) that exist(s) in Prod server is/are as follows: \r{{ extraFromProd.query_result | to_nice_yaml }}"
      when: extraFromProd.rowcount > 0

    - set_fact:
        extraObjFromProd: "{{ result.stdout_lines | replace('-','') | trim }}"

    - debug:
        var: extraObjFromProd

        
    - name: "{{actNo}} - Retrieve extra {{objType}} entr(ies) from DR server(if exist)"
      community.postgresql.postgresql_query:
        db: "{{pgDB}}"
        query: select * from {{drTbl}} except select * from {{prodTbl}};
        login_host: "{{host}}"
        login_user: "{{DBuser}}"
        login_password: "{{DBpassword}}"
      register: extraFromDR

    - name: "{{actNo}} - process STDOUT into temp file for proper display in Tower"
      copy:
        content: "{{ extraFromDR.query_result| to_nice_yaml | trim }}"
        dest: "{{ansPath}}/temp/tempF2"
      become: yes
      become_user: root
      delegate_to: 127.0.0.1

    - shell: |
        cat {{ansPath}}/temp/tempF2
      register: result2
 
    - debug:
        msg: "{{actNo}} - Extra {{objType}} entr(ies) that exist(s) in DR server is/are as follows:\r{{ extraFromDR.query_result | to_nice_yaml }}"
      when: extraFromDR.rowcount > 0

    - set_fact:
        extraObjFromDR: "{{ result2.stdout_lines | replace('-','') }}"

    - debug:
        var: extraObjFromDR
      
    - debug:
        msg: "{{actNo}} - The count of {{objType}} entr(ies) in Prod and DR servers is tally."
      when: extraFromProd.rowcount == extraFromDR.rowcount

  become: yes
  become_user: postgres
  tags: 
    - PA12c
    - PA15c
    - A21c
