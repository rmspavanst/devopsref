1) Download the bundled installer from the customer portal.

https://access.redhat.com/downloads/content/480/ver=2.2/rhel---8/2.2/x86_64/product-software

2) edit the inventory

vi ansible-automation-platform-setup-bundle-2.*.*.*/inventory
[automationcontroller]
10.20.61.183
10.20.61.184
10.20.61.185

#10.22.64.88 ansible_connection=local


[automationhub]
10.20.61.181

[database]
# 10.20.62.120

[servicescatalog_workers]

[all:vars]
admin_password='redhat'

pg_host='10.20.62.120'
pg_port='8003'

pg_database='awx'
pg_username='awx'
pg_password='awx'
pg_sslmode='prefer'  # set to 'verify-full' for client-side enforced SSL

# Automation Hub Configuration
#

automationhub_admin_password='redhat'

automationhub_pg_host='10.20.62.120'
automationhub_pg_port='8003'

automationhub_pg_database='automationhub'
automationhub_pg_username='automationhub'
automationhub_pg_password='automationhub'
automationhub_pg_sslmode='prefer'

# By default if the automation hub package and its dependencies
# are installed they won't get upgraded when running the installer
# even if newer packages are available. One needs to run the ./setup.sh
# script with the following set to True.
#
# automationhub_upgrade = False

# By default when one uploads collections to Automation Hub
# an admin needs to approve it before it is made available
# to the users. If one wants to disble the content approval
# flow, the following setting should be set to False.
#
# automationhub_require_content_approval = True

# At import time collections can go through a series of checks.
# Behaviour is driven by galaxy-importer.cfg configuration.
# Example are ansible-doc, ansible-lint, flake8, ...
#
# The following parameter allow one to drive this configuration.
# This variable is expected to be a dictionnary.
#
# automationhub_importer_settings = None

# The default install will deploy a TLS enabled Automation Hub.
# If for some reason this is not the behavior wanted one can
# disable TLS enabled deployment.
#
# automationhub_disable_https = False

# The default install will deploy a TLS enabled Automation Hub.
# Unless specified otherwise the HSTS web-security policy mechanism
# will be enabled. This setting allows one to disable it if need be.
#
# automationhub_disable_hsts = False

# The default install will generate self-signed certificates for the Automation
# Hub service. If you are providing valid certificate via automationhub_ssl_cert
# and automationhub_ssl_key, one should toggle that value to True.
#
# automationhub_ssl_validate_certs = False


3)run (./setup.sh) file

./setup.sh -e disable_no_log=true


upgrade:
===========

You can upgrade your AAP 2.1.1 installation to the current version 2.2.1 as the following steps, which are similar to the fresh installation.

1) Take a backup for sure. (./setup.sh -b)

2) Download the bundled installer from the customer portal.

https://access.redhat.com/downloads/content/480/ver=2.2/rhel---8/2.2/x86_64/product-software

3) Extract the 2) and configure the inventory file on it.  You may have the current inventory file at /install/AAP_211/ansible-automation-platform-setup-bundle-2.1.1-2/inventory on the PRDANSPLAT01 (10.20.61.183).


tar -xf ansible-automation-platform-setup-bundle.tar.gz


The structure of the inventory file is the same as the previous version though, I recommend copying the template file in the installer and modifying it for your installation.

4) Upgrading the cluster with performing ./setup.sh on the AAP 2.2.1 installer directory.  The setup.sh procedure will upgrade all nodes in the cluster at once.  I recommend planning a maintenance window for a few hours.


==============

Can you try to add the following line at the [all:vars] section in your inventory file?

~~~
ansible_become=true
~~~

Or you can run the "-b" option (--become option) in the command line like this.  Please note that these options should be specified after the "--" so that the options are passed into the ansible-playbook command inside the setup.sh procedures.

~~~
$ ./setup.sh -b -- -b -k -K
~~~



# what components you just installed

ls -1 /usr/lib/python3.8/site-packages/ansible/modules

# set the default python to python3.8

sudo alternatives --set python3 /usr/bin/python3.8

pip3 freeze (explore your packages and setup)



==============================================================================================================

Here are the steps I have confirmed on my side.

1) Please make sure your backup archive will not be removed.

2) Uninstall the AAP 2.2.1 by following steps.

~~~
# automation-controller-service stop
# dnf remove automation-controller* redis* postgresql* supervisor* receptor* ansible* # rm -rf /etc/tower /etc/supervisord.d /var/lib/pgsql /var/lib/awx /var/lib/ansible-automation-platform-bundle
# dnf clean metadata --enablerepo="ansible-automation-platform"
~~~

3) Install the AAP 2.1.1. (extract the archive, configure the inventory file, run setup.sh)

Please make sure that you should set pg_database='awx' in the inventory file.

4) Restore the backup to 3).

~~~
# ./setup.sh -e 'restore_backup_file=/foo/bar/automation-platform-backup-latest.tar.gz' -r ~~~

5) Check if all data is restored as expected from the Web UI.

6) Upgrade 4) to AAP 2.2.1 as discussed in this support case. (extract the archive, configure the inventory file, run setup.sh)




sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/tower/tower.key -out /etc/tower/tower.cert


mkdir -p /etc/tower/


## AAP hub####

cd ~/certified-EEs/
skopeo login hub.lab.example.com
Username: admin
Password: redhat
Login Succeeded!


Set the HUB and AAP shell variables to reduce typing in the following skopeo commands.

[student@workstation certified-EEs]$ HUB="hub.lab.example.com"
[student@workstation certified-EEs]$ AAP="ansible-automation-platform-22"

[student@workstation certified-EEs]$ skopeo copy \
> docker-archive:ee-29-rhel8.tgz docker://${HUB}/${AAP}/ee-29-rhel8:latest
...output omitted...

[student@workstation certified-EEs]$ skopeo copy \
> docker-archive:ee-minimal-rhel8.tgz \
> docker://${HUB}/${AAP}/ee-minimal-rhel8:latest
...output omitted...

[student@workstation certified-EEs]$ skopeo copy \
> docker-archive:ee-supported-rhel8.tgz \
> docker://${HUB}/${AAP}/ee-supported-rhel8:latest
...output omitted...




[student@workstation certified-EEs]$ podman load -i ee-supported-rhel8.tgz
...output omitted...
[student@workstation certified-EEs]$ podman tag \
> registry.redhat.io/ansible-automation-platform-22/ee-supported-rhel8 \
> hub.lab.example.com/ansible-automation-platform-22/ee-supported-rhel8
...output omitted...
[student@workstation certified-EEs]$ podman push \
> hub.lab.example.com/ansible-automation-platform-22/ee-supported-rhel8
...output omitted...


Hub:
======

systemctl stop pulpcore.service pulpcore-api.service pulpcore-content.service pulpcore-worker@1.service pulpcore-worker@2.service nginx.service redis.service







