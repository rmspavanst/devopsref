## https://computingforgeeks.com/how-to-install-jenkins-server-on-kubernetes-openshift/

# Step 1. Create Jenkins namespace

kubectl create ns jenkins

# Once you have Helm3 installed, add Jenkins repo to your environment

helm repo add jenkinsci https://charts.jenkins.io
helm repo update

# Step 2. Create a Persistent Volume

$ vim jenkins-localpv.yaml

kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: jenkins-sc
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins-pv
  labels:
    type: local
spec:
  storageClassName: jenkins-sc
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pvc
spec:
  storageClassName: jenkins-sc
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi


kubectl apply -f jenkins-localpv.yaml

## Dynamic Persistent Volume creation using StorageClass
If you have any StorageClass provided by a custom storage solution, create new file called jenkins-pvc.yaml

vim jenkins-pvc.yaml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: storage-class-name
  resources:
    requests:
      storage: 10Gi

kubectl apply -f jenkins-pvc.yaml


## Using openEBS Storage

# You can use dynamic storage provisioning using tools such as openEBS and provision storageClasses.
# For dynamic storage, create a storageClass config:

$ vim jenkins-sc.yaml

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: jenkins-sc
  annotations:
    openebs.io/cas-type: jiva
    cas.openebs.io/config: |
      - name: ReplicaCount
        value: "2"
      - name: StoragePool
        value: gpdpool
provisioner: openebs.io/provisioner-iscsi

kubectl apply -f jenkins-sc.yaml


## Create a persistenVolume and PersistenVolumeClaim based on the above storageClass

$ vim  dynamic-pv.yaml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins-pv
  labels:
    type: local
spec:
  storageClassName: jenkins-sc
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/data/jenkins-volume"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pvc
spec:
  storageClassName: jenkins-sc
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

kubectl apply -f dynamic-pv.yaml


## Step 3. Create a service account

## Create a service account for the pods to communicate with ther API server. We will also create the ClusterRole and the permissions.


kubectl apply -f - <<EOF
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: jenkins
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: jenkins
rules:
- apiGroups:
  - '*'
  resources:
  - statefulsets
  - services
  - replicationcontrollers
  - replicasets
  - podtemplates
  - podsecuritypolicies
  - pods
  - pods/log
  - pods/exec
  - podpreset
  - poddisruptionbudget
  - persistentvolumes
  - persistentvolumeclaims
  - jobs
  - endpoints
  - deployments
  - deployments/scale
  - daemonsets
  - cronjobs
  - configmaps
  - namespaces
  - events
  - secrets
  verbs:
  - create
  - get
  - watch
  - delete
  - list
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jenkins
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts:jenkins
EOF


## Step 4. Install Jenkins on Kubernetes

# Download the Jenkins chart and make some modifications before the deployment.

wget https://raw.githubusercontent.com/jenkinsci/helm-charts/main/charts/jenkins/values.yaml

# Open the downloaded values.yaml file with your favorite text editor and make the changes below.

# Modify the storage class. In this guide, I have used a storage class called jenkins-sc. You might as well use your own storage class. # Locate the storageClass field in the file and modify it adding the storageClass.
storageClass: jenkins-sc

#Edit the serviceAccount entries to look as below:
serviceAccount:
create: false

# Service account name is autogenerated by default
name: jenkins
annotations: {}
Modify the serviceType to NodePort. You can also use loadbalancer if your environment supports that.
servicePort: 8080
  targetPort: 8080
  # For minikube, set this to NodePort, elsewhere use LoadBalancer
  # Use ClusterIP if your setup includes ingress controller
  serviceType: NodePort
  # Jenkins controller service annotations

## Finally install the Jenkins chart by running the command below:

$ chart=jenkinsci/jenkins
$ helm install jenkins -n jenkins -f values.yaml $chart


# Verify that the deployment is up and running

$ kubectl get pods -n jenkins

## Step 5. Access Jenkins dashboard

When the pods deploy successfully and are running. The next thing is to access the web interface. But first, we need to retrieve the login details.

Obtain Jenkins password
Run the commands below to obtain the jenkins password:

jsonpath="{.data.jenkins-admin-password}"
secret=$(kubectl get secret -n jenkins jenkins -o jsonpath=$jsonpath)
echo $(echo $secret | base64 --decode)
You will get an output similar to this below from decoding the secret


# kubectl scale CONTROLLER my-app --replicas 4

## kubectl autoscale deployment my-app --max 6 --min 4 --cpu-percent 50

## kubectl get hpa

