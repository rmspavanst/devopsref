


#check your CentOS release
cat /etc/redhat-release
#populate your /etc/environment file with below locale settings
vi /etc/environment
LANG=en_US.utf-8
LC_ALL=en_US.utf-8
#if you are not familiar with vi editor; you can press "i" to start editing a file. Press
"esc" when you’re done editing, and then ":wq" to save file and quit vi editor.
#check the status of firewalld service. Stop and disable it if enabled
systemctl status firewalld
systemctl stop firewalld
systemctl disable firewalld
#check the status of NetworkManager service. Stop and disable it if enabled
systemctl status NetworkManager
systemctl stop NetworkManager
systemctl disable NetworkManager
#enable and start network service
systemctl enable network
systemctl start network
#replace "enp0s3" with your interface name and check it's current settings
cat /etc/sysconfig/network-scripts/ifcfg-enp0s3
#disable selinux from it's config file /etc/selinux/config
vi /etc/selinux/config
SELINUX=disabled
#reboot your system
reboot
#after the reboot check the status of selinux, it should be disabled
getenforce
#On CentOS install the latest release of openstack package
sudo yum install -y centos-release-openstack-train
sudo yum install yum-utils
sudo yum-config-manager --enable openstack-train
#this updates your current packages
sudo yum update -y
#install packstack installer
sudo yum install -y openstack-packstack
#to check the IP addresses on your machine
ip address show
#run the packstack installer with below parameters
packstack --allinone --provision-demo=n --os-neutron-ovs-bridge-mappings=extnet:br-ex --os-neutron-ml2-mechanism-drivers=openvswitch --os-neutron-l2-agent=openvswitch --os-neutron-ovs-bridge-interfaces=br-ex:enp0s3 --os-neutron-ml2-type-drivers=vxlan,flat --os-neutron-ml2-tenant-network-types=vxlan
#to check the IP addresses on your machine
ip address show

#make sure your ethernet interface settings look like this. If exists you should
remove the IP address from
the interface
vi /etc/sysconfig/network-scripts/ifcfg-enp0s3
TYPE=OVSPort
NAME=enp0s3
DEVICE=enp0s3
DEVICETYPE=ovs
OVS_BRIDGE=br-ex
ONBOOT=yes
BOOTPROTO=none

#make sure your external bridge settings look like below
vi /etc/sysconfig/network-scripts/ifcfg-br-ex
DEVICE=br-ex
NAME=br-ex
DEVICETYPE=ovs
TYPE=OVSBridge
OVSBOOTPROTO=“none”
IPADDR=<your_IP>
PREFIX=<your_prefix>
GATEWAY=<your_gateway_IP>
IPV4_FAILURE_FATAL=no
IPV6INIT=no
DNS1=<DNS_Server_IP>
ONBOOT=yes

#this command provides you the openstack admin privileges
source keystonerc_admin

#run this command to create your provider network for your instances so they can
# communicate with the outside world
neutron net-create external_network --provider:network_type flat --provider:physical_network extnet --router:external
#this command creates the subnet attached to your provider network. You should be doing the

#configuration according to the LAN that your linux machine is connected to
neutron subnet-create --name public_subnet --enable_dhcp=False
--allocation-pool start=<IP_pool_first_address>,end=<IP_pool_last_address>
--gateway=<linux_gateway_IP> external_network <your_network_in_CIDR>
#example:
neutron subnet-create --name public_subnet --enable_dhcp=False --allocationpool start=192.168.0.120,end=192.168.0.150 --gateway=192.168.0.1 external_network 192.168.0.0/24


cat keystonerc_admin

source keystonerc_admin


# to check server list
openstack server list

# check the crediantials using export cmd
export

# copy the crediantial for operator
cp keystonerc_admin operator1_rc

vi operator1_rc (change the admin username and password)

# create flavor
openstack flavor create --disk 1 --ram 768 --id 20 newflavor
 


#Keystone:
 ==========
 Common authentication system
 Central catalog of services and endpoints
 Supports LDAP, AD, MySQL
 Provides a token for subsequent auth. requests


#Keystone_concepts:
 ===================
 User/ Project/ Role(Globally scoped, Project scoped)/ Token/  Catalog/

# Keystone Architecture:
 ==========================
 keystone API------>polices
                    tokens
                    catalog
                    identity
                    assignment
                    credentials

# Managing keystone from CLI:
==============================
cat keystonerc_admin
source keystonerc_admin

openstack endpoint list
openstack endpoint show <ID>

openstack catalog list
# ceilometer      metering
# swift           object-store
# nova            compute
# placement       placement
# cinderv2        volumev2
# glance          image
# keystone        identity
# gnocchi         metric
# neutron         network
# aodh            alarming
# cinder          volume
# cinderv3        volumev3

openstack project create <project_name>
openstack project show <project_name>
openstack project set --description "for testing purpose" <project_name>

openstack user create --project <project_name> --password-prompt <username>

openstack role list

openstack role add --project <project_name> --user <user_name> admin
openstack role add --project <project_name> --user <user_name> _member_

# to show all openstack command list
openstack command list
openstack command list | grep openstack.identity -A 40


## Glance:
===========
    Stores cloud images and snapshots
    Restful API
    Swift or other object storage backend


 #Images Types:
   RAW
   Machine (kernel/ramdisk outside of images, also known as AMI)
   VHD (Hyper-V)
   VDI (VirtualBox)
   Qcow2 (Qemu/KVM)
   VMDK (VMware)
   OVF (VMware, others)

  https://docs.openstack.org/image-guide/obtain-images.html

  wget http://centos.mirror.liquidtelecom.com/8-stream/isos/x86_64/CentOS-Stream-8-x86_64-latest-boot.iso
  https://computingforgeeks.com/how-to-create-centos-8-kvm-image-template-for-openstack/

 
 # Manage Glance from CLI
 openstack command list | grep openstack.image -A 30

 openstack image list
 openstack image create --min-disk 2 --private --disk-format qcow2 --file <image_file> <image_name>

 openstack image show cirros


## Neutron:
==============

Network connectivity as a service
Ntwork, subnet and port abstractions
Plugins support many technologies
Modular Architecture
Central or distributed deployment

# Benefits of Neutron:
 Rich topologies
 Technology agnostic
 Puggable open Architecture
 Enables advaced services
    Load balancing, VPN, firewalld


ex: neutron:   net1(10.0.0.0/24) --> Virtual subnet
                                 --> L2 virtual network
                                 --> virtual port
                                    --> instance1 (10.0.0.11) --> virtual interface(VIF) --> VM
                                    --> instance2 (10.0.0.12)

# Plugin Extensions:
   Add logical resources to the REST API
      Discovered by server at startup
   Common extensions:
      DHCP, L3, Quota, Security Groups, Provider Networks                             


openstack network agent list
systemctl status neutron-server
ovs-vsctl show
openstack network create -h
openstack network create —project poc intnet
# openstack network create intnet
openstack subnet create subnet1 --subnet-range 10.5.5.0/24 --dns-nameserver 8.8.8.8 --network intnet
ip netns
ip netns exec <namespace> ping 10.5.5.2
ip netns exec <namespace> ip address show
ovs-vsctl show
openstack router create R2
openstack router add subnet R2 subnet1
ovs-vsctl show
ip netns (to check namespace)
ip netns exec <namespace> ip a show
ip netns exec <namespace> ping 5.5.5.1
ovs-vsctl show
# neutron router-gateway-set R2 external_network
openstack router create R2
openstack router add subnet R2 subnet1
ovs-vsctl show
neutron router-gateway-set R2 external_network
Openstack network list

openstack server create --image cirros --flavor 1 --nic net-id=<network_ID> inst1
Openstack security group list
openstack project list
openstack security group rule create --remote-ip 0.0.0.0/0 --protocol icmp --ingress <group_ID>
openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 22 --protocol tcp --ingress <group_ID>
ip netns exec <namespace> ssh cirros@10.5.5.X
Ping 10.5.5.1
ping 192.168.0.178
openstack subnet list
# openstack floating ip create --subnet <subnet_ID> --floating-ip-address 192.168.0.110 <network_name_or_ID>
 openstack floating ip create --subnet <subnet_ID> <network_name_or_ID>
openstack server add floating ip <server_name> <IP_address>
ping <floating ip>
ssh root@<floating ip>
openstack ip availability list --project poc
openstack command list | grep openstack.network -A 70




# Nova:
===========
   One of the two orginl openstack projects
   Provides instance lifecycle management
   Multiple hypervisors supported

 # Nova-Api
 ============
      Extracts parameters abd does basic validation
      Retrieves reference to selected flavor
      Retrives reference to selected boot media
      Saves initial state to database
      Puts a request on the message bus for conductor
   API call returns with instance status of BUILD and task state SCHEDULING

# Instance scheduling:
  Conductor asks scheduler where to create the instance
  Filter scheduler licks in
  Applies filters and weights based on configuration, Filter examples:
      Is the compute node on?
      Does it have enough free vCPUs, free vRAM, free disk?
   Weight examples:
      Give preference to hosts with more free RAM
      Give preference to hosts with less free RAM
 Databse is updated with instance state
 Conductor places message on the queue for nova-compute(compute agent) on the selected compute node.

# Compute Agent:
   Prepares for instance creation:
      Calls glance to get boot media information
      Calls Neutron for attaching the instance to network
      Calls Cinder if need to attach a persistent volume
      Sets up configuration drive if requested
   Communicates with hypervisor to create the virtual machine
   Updates instance state in database(using conductor)


# list nova services
openstack compute service list
# list flavors
openstack flavor list
# get help for flavor creation
openstack flavor create -h
# create a flavor with ID=10, 256 mb ram, 2 gb disk & visible to others
openstack flavor create --id 10 --ram 256 --disk 2 --public tinier
# get help for server create command
openstack server create -h
# create a keypair named mykeypair and copy to mykeypair.key file
openstack keypair create mykeypair >>mykeypair.key
# list images
openstack image list
# list networks
openstack network list
# create a server named instance01 with specified image, key pair, flavor and network.
openstack server create --image cirros --key-name mykeypair --flavor 10 --nic net-id=XXXX instance01
# show details about instance01
openstack server show instance01
# see the filter config in nova.conf file
cat /etc/nova/nova.conf | grep filter
# create a snapshot of instance01
openstack server image create --name snap1 instance01
# list images
openstack image list
# create an host aggregate with property SSD set to true
openstack aggregate create --property SSD=true agg2
      openstack aggregate create nodes-with-SSD
      openstack aggregate set --property SSD=true nodes_with_ssd
      openstack aggregate add host nodes_with_ssd host1
      openstack flavor set --property SSD=true m1.large 

# show the console URL for instance01
openstack console url show --novnc instance01
# to see the instance logs from command line
openstack console log show instance01
# to list all nova related commands
openstack command list | grep openstack.compute -A 80


# openstack_instance_centos7
https://www.server-world.info/en/note?os=CentOS_7&p=openstack_train&f=14

https://www.itzgeek.com/how-tos/linux/centos-how-tos/how-to-launch-an-openstack-instance-using-horizon-dashboard.html


# Cinder (Block Storage service)
===========

cinder service-list
openstack command list |grep openstack.volume -A 60
openstack volume create -h
openstack volume create --size 1 vol1
openstack volume list
openstack server list

ping <instance_IP>
ssh cirros@<instance_IP>
ls /dev
exit
openstack server -h
openstack server add volume <instance_name> <volume_name>
ssh cirros@<instance_IP>
ls /dev
sudo mkfs.ext3 /dev/vdb
sudo mkdir /mydisk
sudo mount /dev/vdb /mydisk
ls -al /mydisk

openstack volume backup create -h
openstack volume backup create --name backup1 --force vol1
openstack volume backup show backup1
openstack volume snapshot create --volume vol1 --force snap1
openstack command list |grep openstack.volume -A 60



# Swift
=========

   Swift- Object Storage Service
   Scalable, distributed, replicated object storage
   Simple, Powerful Restful API
   High concurrency support-lot's of users
   Pooled storage capacity

openstack object store account show
openstack container list
openstack container create container1
openstack container list
openstack container create container2
openstack object create -h
openstack object create container1 keystonerc_admin
swift post -m "Temp-URL-Key:b3968d0207b54ece87cccc06515a89d4"
swift tempurl get 1000 /v1/AUTH_72c319360b17412aaa6094d4377c6e08/container1/ \
keystonerc_admin b3968d0207b54ece87cccc06515a89d4
Openstack endpoint show swift
openstack command list | grep object_store -A 20   




## Logs in Openstack
========================

   openstack services use the standard logging levels, at increasing severity:
    TRACE, DEBUG, INFO, AUDIT, WARNING, ERROR and CRITICAL
   
   To enable logs:
    For Neutron--> edit /etc/neutron.neutron.conf --> debug=true
    For Nova   --> edit /etc/nova/nova.conf       --> debug=true
    For Keystone, edit the /etc/keystone/logging.cong file and look at the logger_root and handler_file sections
    For Horizon, edit /etc/openstack_dashboard/local_settings.py
    For Cinder, edit the configuration file on each node with Cinder role.
    For Glance, edit two configuration files: /etc/glance/glance-api.conf and /etc/glance/glance-registry.conf


  # Log Files
    log location:::  /var/log/nova
                     /var/log/glance
                     /var/log/cinder
                     /var/log/keystone
                     /var/log/neutron
                     /var/log/apache2
                     /var/log/syslog
                     /var/log/libvirt/libvirtd.log
                     /var/lib/nova/instances/instance-<instance-id>/console.log
                     /var/log/cinder/cinder-volume.log




cd /var/log/nova
Openstack server list
tail -f /var/log/nova/* | grep -i error
openstack flavor list
openstack server create --image <image_name> --flavor <flavor_ID> <instance_name>
cat nova-compute.log |grep -i <instance_ID>
cat nova-conductor.log| grep -i <instance_ID>
tail -20 nova-conductor.log
cat nova-scheduler.log| grep -i <instance_ID>









